{"version":3,"sources":["components/Play.js","settings/config.js","components/Lang.js","helpers/helper.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","width","maxWidth","margin","backgroundColor","palette","background","paper","button","formControl","spacing","minWidth","selectEmpty","marginTop","chip","section","Play","classes","useState","text","setText","className","TextField","fullWidth","label","variant","onChange","value","currentTarget","Divider","Button","color","size","endIcon","onClick","msg","SpeechSynthesisUtterance","lang","localStorage","getItem","voiceURI","rate","window","speechSynthesis","speak","speakText","Lang","voices","setVoices","React","setLang","FormControl","InputLabel","id","Select","labelId","target","setItem","onOpen","length","getVoices","sort","a","b","MenuItem","map","key","App","Container","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.31192653.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nimport { Button, TextField} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport HearingIcon from '@material-ui/icons/Hearing';\nimport Divider from '@material-ui/core/Divider';\nimport { speakText } from '../settings/config';\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n    maxWidth: 360,\n    margin: 'auto',\n    backgroundColor: theme.palette.background.paper,\n  },\n  button: {\n    width: '100%'\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 300,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n  chip: {\n    margin: theme.spacing(0.5),\n  },\n  section: {\n    margin: theme.spacing(3, 2),\n  }\n}));\n\nconst Play = () => {\n  const classes = useStyles();\n  const [text, setText] = useState('');\n\n  return (\n    <>\n      <div className={classes.root}>\n        <div className={classes.section}>\n          <TextField fullWidth label=\"Text\" variant=\"outlined\" onChange={({currentTarget: { value }}) => setText(value)}/>\n        </div>\n        <Divider variant=\"middle\" />\n        <div className={classes.section}>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            size=\"large\"\n            className={classes.button}\n            endIcon={<HearingIcon />}\n            onClick={() => text && speakText(text)}\n          >\n            Play\n          </ Button>\n        </div>\n        <Divider variant=\"middle\" />\n      </div>\n    </>\n  )\n}\n\nexport default Play;\n","const speakText = (text) => {\n  const msg = new SpeechSynthesisUtterance(text);\n  msg.lang = localStorage.getItem('lang') || 'pt-PT';\n  msg.voiceURI = \"native\";\n  msg.rate = 0.7;\n  window.speechSynthesis.speak(msg);\n}\n\nexport { speakText };\n","import React, { useState } from 'react';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport { sortByProperty } from '../helpers/helper';\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 100,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n}));\n\n\nconst Lang = () => {\n  const classes = useStyles();\n  const speechSynthesis = window.speechSynthesis;\n  const [voices, setVoices] = useState([]);\n  const [lang, setLang] = React.useState('');\n\n  const handleChange = ({target: { value }}) => {\n    setLang(value);\n    localStorage.setItem('lang', value);\n  };\n\n  const handleOpen = () => {\n    !voices.length && setVoices(sortByProperty(speechSynthesis.getVoices()));\n  };\n\n  return (\n    <FormControl variant=\"outlined\" className={classes.formControl}>\n      <InputLabel id=\"demo-simple-select-outlined-label\">Lang</InputLabel>\n      <Select\n        labelId=\"demo-simple-select-outlined-label\"\n        id=\"demo-simple-select-outlined\"\n        value={lang}\n        onChange={handleChange}\n        label=\"Age\"\n        onOpen={handleOpen}\n      >\n        <MenuItem value=\"\">\n          <em>None</em>\n        </MenuItem>\n        {\n          voices.map(({ lang, voiceURI }) => <MenuItem key={voiceURI} value={lang}>{voiceURI} - {lang}</MenuItem>)\n        }\n      </Select>\n    </FormControl>\n  ) \n}\n\nexport default Lang;","const sortByProperty = array => array.sort((a,b) => (a.voiceURI > b.voiceURI) ? 1 : ((b.voiceURI > a.voiceURI) ? -1 : 0));\n\nexport { sortByProperty }","import React from 'react';\nimport Container from '@material-ui/core/Container';\n\nimport Play from './components/Play';\nimport Lang from './components/Lang';\n\nconst  App = () => (\n  <>\n    <Lang />\n    <Container maxWidth=\"sm\">\n      <div className=\"App\">\n        <Play />\n      </div>\n    </Container>\n  </>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}